#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto compile
#

#
# Fork and compile the latest version yourself using Github Actions
#   1.Into the repository of your own fork
#   2.Into the repository [Settings]
#   3.[Code and automation - Actions] ↓ [General] → [Workflow permissions] ↓  Check the [Read and write permissions] and [Save]
#   4.Let's take [Actions]
#

name: "8632 ipks Auto compile with op SDK"
on:
  repository_dispatch:
  workflow_dispatch:
 
  push:
    branches:
      - 'master'
    paths:
      - 'README.md'

env:
  TZ: Asia/Shanghai
  ARCH: 8632
  GITHUBREPO: kenzok8/small/dns2tcp
  PKGNAME: dns2tcp





jobs:
  job_check:
    #if: github.repository == ${{ github.repository }}
    name: Check Version
    runs-on: ubuntu-20.04
    outputs:
      pkg_version: ${{ steps.check_version.outputs.latest_version }}
      has_update: ${{ steps.check_version.outputs.has_update }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: 'master'

      - name: Check version
        id: check_version
        env:
          url_release: https://api.github.com/repos/${{ env.GITHUBREPO }}/releases
        run: |
          latest_version=$(wget -qO- -t1 -T2 ${{env.url_release}} | awk -F '"' '/tag_name/{print $4}'| head -1)
          latest_release=$(wget -qO- -t1 -T2 ${{env.url_release}} | awk -F '"' '/tag_name/{print $4}'| head -1)
          has_update=$([ "${latest_version}" != "${latest_release}" ] && echo true || echo false)
          echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT
          echo "has_update=${has_update}" >> $GITHUB_OUTPUT
          echo "latest_version: ${latest_version}"
          echo "latest_release: ${latest_release}"
          echo "has_update: ${has_update}"

      - name: Generate new tag & release
        #if: steps.check_version.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.ARCH }} ${{ env.PKGNAME }} For Offical's LEDE 18.06 LuCI
          tag_name: ${{steps.check_version.outputs.latest_version}}

  job_build_package:
    name: Build package (18.06)
    needs: job_check
    #if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        run: |
          echo "Install packages"
          sudo rm -rf ./*
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache openwrt SDK
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: sdk
          key: openwrt-sdk-18.06.9-x86-generic

      - name: Initialization environment
        #if: steps.cache-sdk.outputs.cache-hit != 'true'
        env:
          url_sdk: https://downloads.openwrt.org/releases/18.06.9/targets/x86/generic/openwrt-sdk-18.06.9-x86-generic_gcc-7.3.0_musl.Linux-x86_64.tar.xz
        run: |
          wget ${{ env.url_sdk }}
          file_name=$(echo ${{env.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk && tar -xJf $file_name -C ./sdk --strip-components=1
          cd sdk  
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-18.06" > feeds.conf
          echo "src-git-full packages https://github.com/openwrt/packages.git;openwrt-18.06" >> feeds.conf
          echo "src-git-full luci https://git.openwrt.org/project/luci.git;openwrt-18.06" >> feeds.conf
          echo "src-git-full routing https://git.openwrt.org/feed/routing.git;openwrt-18.06"  >> feeds.conf
          git clone  https://github.com/${{ env.GITHUBREPO }}.git package/downloads/${{ env.PKGNAME }}
          ./scripts/feeds update -a
          echo "CONFIG_PACKAGE_${{ env.PKGNAME }}=m" > .config
          ./scripts/feeds install -d n ${{ env.PKGNAME }}
          make download -j8

      - name: Configure package (18.06)
        run: |
          cd sdk
          ./scripts/feeds install ${{ env.PKGNAME }}
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          echo "CONFIG_PACKAGE_${{ env.PKGNAME }}=m" >> .config
          make defconfig

      - name: Compile package (18.06)
        id: compile
        run: |
          cd sdk
          echo "make package/${{ env.PKGNAME }}/{clean,compile} -j$(nproc)"
          make package/${{ env.PKGNAME }}/{clean,compile} -j$(nproc)   V=s
          mv bin/packages/i386_pentium4/base/ ../
          rm .config .config.old
          cd ..
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload package (18.06) ipks to release
        uses: softprops/action-gh-release@v1
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.job_check.outputs.pkg_version}}
          files: ${{ env.FIRMWARE }}/base/luci*.ipk
